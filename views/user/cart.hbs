<section>
     <div class="container">
          <table class="table mt-5">
               <thead>
                    <tr>
                         <th scope="col">Item</th>
                         <th scope="col">Title</th>
                         <th scope="col">Quantity</th>
                    </tr>
               </thead>
               <tbody>
                    {{#each products}}
                    <tr id="row-{{this.product._id}}">
                         <td><img style="width:70px ; height:70px" src="/product-images/{{this.product._id}}.jpg"
                                   alt=""></td>
                         <td>{{this.product.Name}} </td>
                         <td>
                              <button id="minus-{{this.product._id}}" class="cart-item-count mr-3"
                                   onclick="changeQuantity('{{this._id}}','{{this.product._id}}',-1)">-</button>

                              <span id="qty-{{this.product._id}}">{{this.quantity}}</span>

                              <button id="plus-{{this.product._id}}" class="cart-item-count ml-3"
                                   onclick="changeQuantity('{{this._id}}','{{this.product._id}}',1)">+</button>
                         </td>
                         <td>
                              <button class="btn btn-danger"
                                   onclick="removeProduct('{{this._id}}','{{this.product._id}}')">
                                   Remove
                              </button>
                         </td>
                    </tr>
                    {{/each}}
               </tbody>
          </table>
     </div>
</section>

<script>
  // helper: safely parse int from span
  function getQty(proId) {
    const val = $('#qty-' + proId).text();
    return isNaN(parseInt(val)) ? 0 : parseInt(val);
  }

  function changeQuantity(cartId, proId, count) {
    const qtyElem = $('#qty-' + proId);
    const minusBtn = $('#minus-' + proId);

    // read current from DOM
    const currentQty = getQty(proId);
    const newQty = currentQty + count;

    // prevent going below 1
    if (newQty < 1) return;

    // Optimistic UI update
    qtyElem.text(newQty);
    if (newQty <= 1) minusBtn.prop('disabled', true); else minusBtn.prop('disabled', false);

    // send request
    $.ajax({
      url: '/change-product-quantity',
      method: 'post',
      data: { cart: cartId, product: proId, count: count },
      success: (response) => {
        if (!response || !response.status) {
          // rollback if server says no
          qtyElem.text(currentQty);
          if (currentQty <= 1) minusBtn.prop('disabled', true); else minusBtn.prop('disabled', false);
          console.error('Server rejected update:', response);
          alert('Could not update quantity. Try again.');
        } else {
          // If you want to trust server more, you can use server-sent updatedQuantity:
          // if(response.updatedQuantity) qtyElem.text(response.updatedQuantity)
        }
      },
      error: (err) => {
        // rollback on error
        qtyElem.text(currentQty);
        if (currentQty <= 1) minusBtn.prop('disabled', true); else minusBtn.prop('disabled', false);
        console.error('AJAX error:', err);
        alert('Network error. Try again.');
      }
    });
  }

  function removeProduct(cartId, proId) {
    // optimistic UI remove
    const $row = $('#row-' + proId);
    const backupHtml = $row.prop('outerHTML');

    $row.remove();

    $.ajax({
      url: '/remove-product',
      type: 'post',
      data: { cart: cartId, product: proId },
      success: (response) => {
        if (!response || !response.status) {
          // rollback if something went wrong
          console.error('Server failed to remove product:', response);
          // put the row back (simple rollback)
          $('#cart-table tbody').append(backupHtml); // adjust selector to match your table wrapper
          alert('Could not remove product. Try again.');
        }
      },
      error: (err) => {
        // rollback on network error
        console.error('AJAX error while removing:', err);
        $('#cart-table tbody').append(backupHtml); // adjust selector to match your table wrapper
        alert('Network error. Try again.');
      }
    });
  }
</script>
